Timer unit: 1e-07 s

Total time: 16.3023 s
File: C:\Users\user\AppData\Local\Temp\ipykernel_3000\2206831602.py
Function: model_gen_sub at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           def model_gen_sub(argument):
     3                                               
     4                                               #Bounds for the box in which a single model is recycled
     5         1         15.0     15.0      0.0      same_model_bounds = argument[0]
     6                                               #Bounds for the box from which the sample spots are drawn
     7         1         12.0     12.0      0.0      model_input_bounds = argument[1]
     8                                               #Half-width of the box drawn around each ePSF
     9         1          9.0      9.0      0.0      box_half_width = argument[2]
    10                                               
    11                                               #Pare the x and y center lists down to those sampled for the model, and that the model recycles over
    12         1        261.0    261.0      0.0      same_model_mask = np.zeros(len(spot_ycents),dtype=bool)
    13     72030     380736.0      5.3      0.2      for i, y in enumerate(spot_ycents):
    14     68504    2758477.0     40.3      1.7          if (spot_ycents[i] >= same_model_bounds[0] and spot_ycents[i] <= same_model_bounds[1]
    15      3354     148041.0     44.1      0.1              and spot_xcents[i] >= same_model_bounds[2] and spot_xcents[i] <= same_model_bounds[3]):
    16       172        741.0      4.3      0.0              same_model_mask[i]=True
    17                                                   
    18         1      52049.0  52049.0      0.0      same_model_ycents = np.array(spot_ycents)[same_model_mask]
    19         1      57090.0  57090.0      0.0      same_model_xcents = np.array(spot_xcents)[same_model_mask]
    20                                                   
    21         1        148.0    148.0      0.0      model_input_mask = np.zeros(len(spot_ycents),dtype=bool)
    22     72030     369291.0      5.1      0.2      for i, y in enumerate(spot_ycents):
    23     68504    2625621.0     38.3      1.6          if (spot_ycents[i] >= model_input_bounds[0] and spot_ycents[i] <= model_input_bounds[1]
    24      3354     127804.0     38.1      0.1              and spot_xcents[i] >= model_input_bounds[2] and spot_xcents[i] <= model_input_bounds[3]):
    25       172        952.0      5.5      0.0              model_input_mask[i]=True
    26                                                   
    27         1      57414.0  57414.0      0.0      input_ycents = np.array(spot_ycents)[model_input_mask]
    28         1      59697.0  59697.0      0.0      input_xcents = np.array(spot_xcents)[model_input_mask]
    29                                               
    30                                               #Identify the central spot and mask it from the arrays
    31         1         29.0     29.0      0.0      centery = (same_model_bounds[0]+same_model_bounds[1])/2; centerx = (same_model_bounds[2]+same_model_bounds[3])/2
    32         1        285.0    285.0      0.0      input_cent_offs = ( (input_ycents-centery)**2 + (input_xcents-centerx)**2 )**0.5
    33         1        295.0    295.0      0.0      cent_ind = np.argmin(input_cent_offs)
    34         1        187.0    187.0      0.0      nocentmask = np.ones(len(input_ycents),dtype=bool)
    35         1         19.0     19.0      0.0      nocentmask[cent_ind]=False
    36         1         20.0     20.0      0.0      input_ycents = input_ycents[nocentmask]
    37         1         10.0     10.0      0.0      input_xcents = input_xcents[nocentmask]
    38                                               
    39                                               #Copy the section of the original image
    40         2         30.0     15.0      0.0      current_section = flat[model_input_bounds[0]:model_input_bounds[1],
    41         2       2679.0   1339.5      0.0                             model_input_bounds[2]:model_input_bounds[3]] -np.nanmedian(flat[model_input_bounds[0]:model_input_bounds[1],
    42         1          3.0      3.0      0.0                                                                                             model_input_bounds[2]:model_input_bounds[3]])
    43                                               
    44                                               #Generate the EPSFBuilder
    45         1        350.0    350.0      0.0      nddata=NDData(data=current_section)
    46         1        666.0    666.0      0.0      input_tbl = Table()
    47         1       1929.0   1929.0      0.0      input_tbl['x'] = input_xcents - model_input_bounds[2]
    48         1       1308.0   1308.0      0.0      input_tbl['y'] = input_ycents - model_input_bounds[0]
    49         1     207718.0 207718.0      0.1      input_spots = extract_stars(nddata, input_tbl, size=2*box_half_width+1)
    50                                               
    51         1       1443.0   1443.0      0.0      print('')
    52                                               #print(input_tbl)
    53         1        179.0    179.0      0.0      print('# spots: '+str(len(input_xcents))+'; extracted: '+str(len(input_spots)))
    54                                           
    55         1       1479.0   1479.0      0.0      epsf_builder = EPSFBuilder(oversampling=4, maxiters=1)  
    56         1   31956169.0 31956169.0     19.6      epsf, fitted_stars = epsf_builder(input_spots)
    57                                               
    58       172       2869.0     16.7      0.0      for i, spot in enumerate(same_model_ycents):
    59                                                   #Darw a box around the current PSF
    60       172       2299.0     13.4      0.0          current_ycent = same_model_ycents[i]; current_xcent = same_model_xcents[i]
    61       172      20908.0    121.6      0.0          round_ycent = int(round(current_ycent,0)); round_xcent = int(round(current_xcent,0))
    62                                           
    63       172       1686.0      9.8      0.0          box_bounds = []
    64                                                   
    65       172       1176.0      6.8      0.0          if round_ycent-box_half_width >= 0:
    66       172       1623.0      9.4      0.0              box_bounds.append(round_ycent-box_half_width)
    67                                                   else:
    68                                                       box_bounds.append(0)
    69                                           
    70       172       3278.0     19.1      0.0          if round_ycent+box_half_width <= len(flat):
    71       172       1106.0      6.4      0.0              box_bounds.append(round_ycent+box_half_width)
    72                                                   else:
    73                                                       box_bounds.append(len(flat))
    74                                           
    75       172        967.0      5.6      0.0          if round_xcent-box_half_width >= 0:
    76       172       1046.0      6.1      0.0              box_bounds.append(round_xcent-box_half_width)
    77                                                   else:
    78                                                       box_bounds.append(0)
    79                                           
    80       172       1329.0      7.7      0.0          if round_xcent+box_half_width <= len(flat):
    81       172       1359.0      7.9      0.0              box_bounds.append(round_xcent+box_half_width)
    82                                                   else:
    83                                                       box_bounds.append(len(flat))
    84                                                       
    85       172     143308.0    833.2      0.1          x,y = np.mgrid[:box_bounds[1]-box_bounds[0],:box_bounds[3]-box_bounds[2]]
    86                                           
    87       172       3203.0     18.6      0.0          center_spot = flat[box_bounds[0]:box_bounds[1], box_bounds[2]:box_bounds[3]]
    88                                           
    89                                                   #Get the best-fit parameters for the ePSF
    90                                                   
    91       344  123303480.0 358440.3     75.6          spot_results = minimize(epsf_residuals, [np.sum(center_spot), current_ycent-box_bounds[0],
    92       172       4728.0     27.5      0.0                                                   current_xcent-box_bounds[2],
    93       172     566284.0   3292.3      0.3                                                   np.nanmedian(flat[model_input_bounds[0]:model_input_bounds[1],
    94       172       1079.0      6.3      0.0                                                                     model_input_bounds[2]:model_input_bounds[3]])],
    95       344      13733.0     39.9      0.0                                  args=(y, x, center_spot, epsf)).x
    96                                                   
    97                                                   
    98                                                   #Evaluate the ePSF
    99       344     122351.0    355.7      0.1          eval_model = epsf.evaluate(x=y,y=x,flux=spot_results[0],
   100       344       2679.0      7.8      0.0                                     x_0=spot_results[1], y_0=spot_results[2]) + spot_results[3]
   101                                                   
   102                                                   #Put it into the artificial image
   103       172       9496.0     55.2      0.0          artificial_extracted_image[box_bounds[0]:box_bounds[1], box_bounds[2]:box_bounds[3]]=eval_model
   104                                               
   105         1          4.0      4.0      0.0      return [artificial_extracted_image, epsf]